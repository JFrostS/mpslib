{
  "name": "MPS",
  "tagline": "A C++ class for Mutiple Point Simulation algorithms",
  "body": "# MPS: a C++ class for Multiple-Point based sequential Simulation\r\nMPS provides a set of algorithms for simulation of models based on a multiple point\r\nstatistical model inferred from a training image.\r\n\r\nThe goal of developing these codes has been to produce a set of algorithms, based\r\non sequential simulation, for simulation of multiple point statistical random models, \r\nThe code should be easy to compile and extend, and should be allowed for both\r\ncommercial and non-commercial use.\r\n\r\nMPS (version 1.0) has been developed by\r\n[I-GIS](http://www.i-gis.dk/)\r\nand\r\n[Solid Earth Physics, Niels Bohr Institute](http://imgp.nbi.ku.dk/).\r\n\r\nDevelopment has been funded by the Danish National Hightech Foundation (now: the Innovation fund) thorugh the ERGO (Effective high-resolution Geological Modeling) project, a collaboration between\r\n[IGIS](http://i-gis.dk/),\r\n[GEUS](http://geus.dk/), and \r\n[Niels Bohr Institute](http://nbi.ku.dk/).\r\n\r\n# Documentation\r\nMPS is documented through Doxygen.\r\n\r\n# Compilation\r\nThe MPS codes are written in standard [C++11](https://www.wikiwand.com/en/C%2B%2B11).\r\n\r\nMPS has been developed using the GNU C++ compiler (tested on Windows, Linux and OSX), and Visual Studio C++.\r\n\r\n## Linux (GCC version 4.8.3)\r\nOn Ubuntu Linux 14.04, the following compiler flags are used:\r\n\r\nCPPFLAGS = -g -static -O3 -std=c++11 -Wl,--no-as-needed \r\n\r\n## OSX (XCODE+GCC)\r\nThe '-static' option is not available uinsg XCode/OSX, so the following compiler flags were used:\r\n\r\nCPPFLAGS = -g -O3 \r\n\r\n## Windows: (mingw-w64)\r\nCompiler flags:\r\n\r\nCPPFLAGS = -g -static -O3\r\n\r\nMPS has been tested uing mingw in windows. Note that not all builds of mingw will work. Therefor we specifically make use of mingw-w64 ([http://mingw-w64.org/doku.php]), which can be obtained in a number of ways.\r\n\r\nOne (recommended) approach is to make use of MSYS2. Follow the guide at [http://msys2.github.io/] to install MSYS2, and then install the mingw_w64 toolchain using:\r\n\r\n\t\tpacman -S mingw-w64-x86_64-gcc\r\n\t\tpacman -S make\r\n\r\n\r\n# Release history\r\n\r\n## v1.0 [15-02-2016]\r\nInitial release of MPS, with\r\n`mps_snesim_list`, \r\n`mps_snesim_tree`, and\r\n`mps_genesim`.\r\n\r\n\r\n# Running MPS algorithms\r\nThe MPS algorithms are run from the commandline using a parameter filename as an argument.\r\nIf no argument is give, the deafault parameter file is assumed to the be name of the simulation \r\nalgorithm appended with '.txt'.\r\n\r\nTherefore\r\n```\r\nmps_genesim\r\n```\r\nand \r\n\r\n```\r\nmps_genesim mps_genesim.txt \r\n```\r\nhas the same meaning.\r\n\r\n\r\n## SNESIM: `mps_snesim_tree` and `mps_snesim_list`\r\nthe `mps_snesim_tree` and `mps_snesim_list` differ only in the way conditional data are stored in memory\r\n(using either a tree or a list structure). \r\n\r\nBoth algorithms share the same format for the required parameter file:\r\n```\r\nNumber of realizations # 1\r\nRandom Seed (0 for not random seed) # 0\r\nNumber of mulitple grids # 2\r\nMin Node count (0 if not set any limit) # 0\r\nMax Conditional count (-1 if not using any limit) # -1\r\nSearch template size X # 5\r\nSearch template size Y # 5\r\nSearch template size Z # 1\r\nSimulation grid size X # 100\r\nSimulation grid size Y # 100\r\nSimulation grid size Z # 1\r\nSimulation grid world/origin X # 0\r\nSimulation grid world/origin Y # 0\r\nSimulation grid world/origin Z # 0\r\nSimulation grid grid cell size X # 1\r\nSimulation grid grid cell size Y # 1\r\nSimulation grid grid cell size Z # 1\r\nTraining image file (spaces not allowed) # TI/mps_ti.dat\r\nOutput folder (spaces in name not allowed) # output/.\r\nShuffle Simulation Grid path (1 : random, 0 : sequential) # 1\r\nMaximum number of counts for condtitional pdf # 10000\r\nShuffle Training Image path (1 : random, 0 : sequential) # 1\r\nHardData filaneme  (same size as the simulation grid)# harddata/mps_hard_grid.dat\r\nHardData seach radius (world units) # 15\r\nSoftdata categories (separated by ;) # 1;0\r\nSoft datafilenames (separated by ; only need (number_categories - 1) grids) # softdata/mps_soft_xyzd_grid.dat\r\nNumber of threads (minimum 1, maximum 8 - depend on your CPU) # 1\r\nDebug mode(2: write to file, 1: show preview, 0: show counters, -1: no ) # 1\r\n```\r\n\r\nA few lines in the paremeter files are specific to the SNESIM type algorithms, and will be discussed below:\r\n#### line 3, n_mul_grids\r\nn_mul_grids defines the number of multiple grids used. \r\nn_mul_grids=0, means that no multiple grid will be used.\r\n\r\n#### line 4, n_min_node\r\nThe search tree will only be searched to a level where the number of counts in the \r\nconditional distribution is above n_min_node.\r\n\r\n#### line 5, n_cond\r\nn_cond is the maximum number of conditional point used, within the search template\r\n\r\n#### lines 6-8, the search template, tem_nx, tem_ny, tem_nz\r\nThe search template defines the size of the template that is used to prescan the traning image \r\nand store (using a tree or list) the conditional distribution for all figurations of the data template. \r\n\r\n## Generalized ENESIM: mps_genesim\r\n`mps_genesim` is a generalized version of the ENESIM algorithm, that can be used to perform MPS simulation \r\nsimilar to both ENESIM and Direct sampling (and in-between) depending how it is run.\r\n\r\nAn example of a parameter file is:\r\n```\r\nNumber of realizations # 1\r\nRandom Seed (0 `random` seed) # 0\r\nMaximum number of counts for conditional pdf # 1\r\nMax number of conditional point # 25\r\nMax number of iterations # 10000\r\nSimulation grid size X # 18\r\nSimulation grid size Y # 16\r\nSimulation grid size Z # 1\r\nSimulation grid world/origin X # 0\r\nSimulation grid world/origin Y # 0\r\nSimulation grid world/origin Z # 0\r\nSimulation grid grid cell size X # 1\r\nSimulation grid grid cell size Y # 1\r\nSimulation grid grid cell size Z # 1\r\nTraining image file (spaces not allowed) # ti.dat\r\nOutput folder (spaces in name not allowed) # .\r\nShuffle Simulation Grid path (1 : random, 0 : sequential) # 2\r\nShuffle Training Image path (1 : random, 0 : sequential) # 1\r\nHardData filename  (same size as the simulation grid)# conditional.dat\r\nHardData seach radius (world units) # 1\r\nSoftdata categories (separated by ;) # 0;1\r\nSoft datafilenames (separated by ; only need (number_categories - 1) grids) # soft.dat\r\nNumber of threads (minimum 1, maximum 8 - depend on your CPU) # 1\r\nDebug mode(2: write to file, 1: show preview, 0: show counters, -1: no ) # -2\r\n```\r\n\r\nA few lines in the parameter files are specific to the GENESIM type algorithm, and will be discussed below:\r\n\r\n#### line 3: Maximum number of counts for conditional pdf, n_max_count_cpdf\r\nn_max_count_cpdf defines the maximum number of counts in the conditional distribtion obtained from the training image.\r\nWhen n_max_count_cpdf has been reached the scanning of the training image stops. \r\n\r\n##### ENESIM style\r\nIn case n_max_count_cpdf=infinity, mps_genesim will behave exactly to the classical ENESIM\r\nalgorithm, where the full traning is scanned at each iteration\r\n\r\n##### Direct sampling style\r\nIn case n_max_count_cpdf=1, mps_genesim will behave similar to the direct sampling algorithm, \r\n \r\n#### line 4: Max number for conditional points, n_cond\r\nA maximum of n_cond conditional data are considered at each iteration when infering the \r\nconditional pdf from the training image.\r\n\r\n#### line 5:Max number of iterations, n_max_ite\r\nA maximum of n_max_ite iterations of searching through the training image are performed. \r\n\r\n\r\n\r\n## General options in the parameter files\r\nThe following entrie appear in all parameter files\r\n\r\n\r\n#### Number of realizations \r\nThe number of realizations to generate\r\n\r\n#### Random Seed\r\nAn integer determines the random seed. A fixed value will return the same realizations for each run.\r\n+ [0] assign a 'random' seed at each iteratoin (new seed every second)\r\n\r\n#### Simulation grid size X, Y, Z\r\nThe number of grid cells in the simulation grid \r\n\r\n#### Simulation grid origin X, Y, Z\r\nThe value coordinate of the first pixel in the X, Y, and Z direction. \r\n\r\n#### Simulation grid grid cell size X # \r\nThe size of each pixel in the simulation grid, in the X, Y, and Z direction. \r\n\r\n#### Training image file \r\nThe name of the training image file (no spaces allowed).\r\nit must be in GLSIB/EAS ASCII format, and the first line (the 'title') must contain the \r\ndimension of the traning file as 'NXxNYxNZ'.\r\nSee the TI folder for examples. \r\n\r\n\r\n#### Output folder (spaces in name not allowed) \r\nThe path to the folder containing all output. Use forward slash '/' to separate folders.\r\n\r\n\r\n\r\n#### Shuffle Simulation Grid path (1 : random, 0 : sequential) # 1\r\n+ [0] sequential path through simulation grid (possibly a multiple grid)\r\n+ [1] random path through simulation grid\r\n\r\n#### Maximum number of counts for condtitional pdf\r\n\r\n#### Shuffle Training Image path (1 : random, 0 : sequential)\r\n(Does not affect snesim type algrothms)\r\n+ [0] sequential path \r\n+ [1] random path\r\n\r\n#### HardData filaneme  \r\nEAS filename wity 4 columns: X, Y, Z, and D\r\n\r\n#### HardData seach radius \r\n(world units) \r\n\r\n#### Softdata categories \r\n(separated by ;) \r\n\r\n#### Soft datafilenames \r\n(separated by ; only need (number_categories - 1) grids) \r\n\r\n#### Number of threads (minimum 1, maximum 8 - depend on your CPU) \r\nCurrently not used. \r\n\r\n#### Debug mode\r\n+ [-2]: No information is written to screen or files on disk\r\n+ [-1]: + Simulation output is written to files on disk\r\n+ [ 0]: + Information about simulation is written to screen\r\n+ [ 1]: + Simulated realization(s) are shown in terminal\r\n+ [ 2]: + Extra information is written to disk (Random path, ...)\r\n+ [ 3]: + Debug information written to screen (in general not useful for an end-user)\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}